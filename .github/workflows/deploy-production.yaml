name: Deploy Production
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: docker build -t sapphire:${{ github.ref_name }} --target slim .
  undeploy:
    runs-on: self-hosted
    steps:
      - name: Remove stack
        run: docker stack remove sapphire-production
      - name: Wait removing
        run: until [ -z $(docker stack ps sapphire-production -q) ]; do sleep 1; done
  up-postgres:
    needs: [undeploy]
    runs-on: self-hosted
    steps:
      - name: Remove old Postgres for migrations
        run: docker rm sapphire-database-for-migrations-production --force || true
      - name: Run Postgres for migrations
        run: >
          docker run --rm
          -v /sapphire/production/database_data:/var/lib/postgresql/data
          --name sapphire-database-for-migrations-production
          --detach
          postgres:16.0-bookworm
  migrate-users:
    needs: [build, up-postgres]
    runs-on: self-hosted
    steps:
      - name: Migrate Users
        run: >
          docker run --rm -e DB_DSN=$(echo ${USERS_DB_DSN_PRODUCTION} | sed -e "s/%/%%/g")
          --link sapphire-database-for-migrations-production:database
          sapphire:${{ github.ref_name }}
          users database migrations migrate
  migrate-storage:
    needs: [build, up-postgres]
    runs-on: self-hosted
    steps:
      - name: Migrate Storage
        run: >
          docker run --rm -e DB_DSN=$(echo ${STORAGE_DB_DSN_PRODUCTION} | sed -e "s/%/%%/g")
          --link sapphire-database-for-migrations-production:database
          sapphire:${{ github.ref_name }}
          storage database migrations migrate
  migrate-projects:
    needs: [build, up-postgres]
    runs-on: self-hosted
    steps:
      - name: Migrate Projects
        run: >
          docker run --rm -e DB_DSN=$(echo ${PROJECTS_DB_DSN_PRODUCTION} | sed -e "s/%/%%/g")
          --link sapphire-database-for-migrations-production:database
          sapphire:${{ github.ref_name }}
          projects database migrations migrate
  migrate-notifications:
    needs: [build, up-postgres]
    runs-on: self-hosted
    steps:
      - name: Migrate Notifications
        run: >
          docker run --rm -e DB_DSN=$(echo ${NOTIFICATIONS_DB_DSN_PRODUCTION} | sed -e "s/%/%%/g")
          --link sapphire-database-for-migrations-production:database
          sapphire:${{ github.ref_name }}
          notifications database migrations migrate
  migrate-messenger:
    needs: [build, up-postgres]
    runs-on: self-hosted
    steps:
      - name: Migrate Messenger
        run: >
          docker run --rm -e DB_DSN=$(echo ${MESSENGER_DB_DSN_PRODUCTION} | sed -e "s/%/%%/g")
          --link sapphire-database-for-migrations-production:database
          sapphire:${{ github.ref_name }}
          storage database migrations migrate
  down-postgres:
    needs:
      - migrate-users
      - migrate-storage
      - migrate-projects
      - migrate-notifications
      - migrate-messenger
    runs-on: self-hosted
    steps:
      - name: Stop Postgres for migrations
        run: docker rm sapphire-database-for-migrations-stage --force
  deploy:
    needs: [down-postgres]
    runs-on: self-hosted
    if: jobs.up-postgres.result == "success"
    steps:
      - name: Set environment variables
        run: |
          echo "HABR_OAUTH2_CLIENT_ID_NAME=habr_oauth2_client_id_production" >> $GITHUB_ENV
          echo "HABR_OAUTH2_CLIENT_SECRET_NAME=habr_oauth2_client_secret_production" >> $GITHUB_ENV
          echo "HABR_API_KEY_NAME=habr_api_key_production" >> $GITHUB_ENV
          echo "JWT_ACCESS_TOKEN_PRIVATE_KEY_NAME=jwt_access_token_private_key_production" >> $GITHUB_ENV
          echo "JWT_ACCESS_TOKEN_PUBLIC_KEY_NAME=jwt_access_token_public_key_production" >> $GITHUB_ENV
          echo "JWT_REFRESH_TOKEN_PRIVATE_KEY_NAME=jwt_refresh_token_private_key_production" >> $GITHUB_ENV
          echo "JWT_REFRESH_TOKEN_PUBLIC_KEY_NAME=jwt_refresh_token_public_key_production" >> $GITHUB_ENV
          echo "POSTGRESQL_PASSWORD_NAME=postgresql_password_production" >> $GITHUB_ENV
          echo "DATABASE_DIR=/sapphire/production/database_data" >> $GITHUB_ENV
          echo "REDIS_DIR=/sapphire/production/redis_data" >> $GITHUB_ENV
          echo "BROKER_DIR=/sapphire/production/broker_dir" >> $GITHUB_ENV
          echo "SAPPHIRE_IMAGE=sapphire:${GITHUB_SHA}" >> $GITHUB_ENV
          echo "USERS_PORT=2000" >> $GITHUB_ENV
          echo "USERS_DB_DSN=${USERS_DB_DSN_PRODUCTION}" >> $GITHUB_ENV
          echo "USERS_ROOT_URL=${USERS_ROOT_URL_PRODUCTION}" >> $GITHUB_ENV
          echo "USERS_ROOT_PATH=${USERS_ROOT_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "USERS_ALLOWED_ORIGINS=${USERS_ALLOWED_ORIGINS_PRODUCTION}" >> $GITHUB_ENV
          echo "USERS_MEDIA_DIR_PATH=${USERS_MEDIA_DIR_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "STORAGE_PORT=2010" >> $GITHUB_ENV
          echo "STORAGE_DB_DSN=${STORAGE_DB_DSN_PRODUCTION}" >> $GITHUB_ENV
          echo "STORAGE_ROOT_URL=${STORAGE_ROOT_URL_PRODUCTION}" >> $GITHUB_ENV
          echo "STORAGE_ROOT_PATH=${STORAGE_ROOT_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "STORAGE_ALLOWED_ORIGINS=${STORAGE_ALLOWED_ORIGINS_PRODUCTION}" >> $GITHUB_ENV
          echo "PROJECTS_PORT=2020" >> $GITHUB_ENV
          echo "PROJECTS_DB_DSN=${PROJECTS_DB_DSN_PRODUCTION}" >> $GITHUB_ENV
          echo "PROJECTS_ROOT_URL=${PROJECTS_ROOT_URL_PRODUCTION}" >> $GITHUB_ENV
          echo "PROJECTS_ROOT_PATH=${PROJECTS_ROOT_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "PROJECTS_ALLOWED_ORIGINS=${PROJECTS_ALLOWED_ORIGINS_PRODUCTION}" >> $GITHUB_ENV
          echo "PROJECTS_MEDIA_DIR_PATH=${PROJECTS_MEDIA_DIR_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "NOTIFICATIONS_PORT=2030" >> $GITHUB_ENV
          echo "NOTIFICATIONS_DB_DSN=${NOTIFICATIONS_DB_DSN_PRODUCTION}" >> $GITHUB_ENV
          echo "NOTIFICATIONS_ROOT_URL=${NOTIFICATIONS_ROOT_URL_PRODUCTION}" >> $GITHUB_ENV
          echo "NOTIFICATIONS_ROOT_PATH=${NOTIFICATIONS_ROOT_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "NOTIFICATIONS_ALLOWED_ORIGINS=${NOTIFICATIONS_ALLOWED_ORIGINS_PRODUCTION}" >> $GITHUB_ENV
          echo "MESSENGER_PORT=2040" >> $GITHUB_ENV
          echo "MESSENGER_DB_DSN=${MESSENGER_DB_DSN_PRODUCTION}" >> $GITHUB_ENV
          echo "MESSENGER_ROOT_URL=${MESSENGER_ROOT_URL_PRODUCTION}" >> $GITHUB_ENV
          echo "MESSENGER_ROOT_PATH=${MESSENGER_ROOT_PATH_PRODUCTION}" >> $GITHUB_ENV
          echo "MESSENGER_ALLOWED_ORIGINS=${MESSENGER_ALLOWED_ORIGINS_PRODUCTION}" >> $GITHUB_ENV
      - name: Deploy
        run: docker stack deploy -c docker-compose.yaml sapphire-production
