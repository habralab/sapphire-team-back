version: "3.8"
services:
  # metrics-node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.rootfs=/rootfs"
  #     - "--path.sysfs=/host/sys"
  #     - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  #   deploy:
  #     mode: global
  #
  # metrics:
  #   image: prom/prometheus
  #   user: "0:0"
  #   volumes:
  #     - metrics-data:/prometheus
  #   configs:
  #     - source: prometheus
  #       target: /etc/prometheus/prometheus.yaml
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yaml"
  #     - "--storage.tsdb.path=/prometheus"
  #   deploy:
  #     replicas: 1
  #
  # metrics-ui:
  #   image: grafana/grafana
  #   user: "0:0"
  #   volumes:
  #     - metrics-ui-data:/var/lib/grafana
  #   environment:
  #     GF_SERVER_ROOT_URL: ${METRICS_UI_ROOT_URL:-http://localhost:3000}${METRICS_UI_ROOT_PATH:-/metrics}
  #   deploy:
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.middlewares.metrics-ui-stripprefix.stripprefix.prefixes=${METRICS_UI_ROOT_PATH:-/metrics}"
  #       - "traefik.http.routers.metrics-ui.middlewares=metrics-ui-stripprefix"
  #       - "traefik.http.routers.metrics-ui.rule=PathPrefix(`${METRICS_UI_ROOT_PATH:-/metrics}`)"
  #       - "traefik.http.routers.metrics-ui.service=metrics-ui"
  #       - "traefik.http.routers.metrics-ui.entrypoints=web"
  #       - "traefik.http.services.metrics-ui.loadbalancer.server.port=3000"
  #     replicas: 1
  
  cache:
    image: redis:7.2.1-bookworm
    volumes:
      - cache-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      replicas: 1

  broker-manager:
    image: confluentinc/cp-zookeeper:7.5.0
    user: 0:0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - broker-manager-data:/var/lib/zookeeper/data
      - broker-manager-log:/var/lib/zookeeper/log
    healthcheck:
      test: nc -z localhost 2181 || exit -1
    deploy:
      replicas: 1

  broker:
    image: confluentinc/cp-kafka:7.5.0
    user: 0:0
    environment:
      KAFKA_ZOOKEEPER_CONNECT: broker-manager:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - broker-data:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9091 || exit -1
    deploy:
      replicas: 1

  broker-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9091
      SERVER_SERVLET_CONTEXT_PATH: ${BROKER_UI_ROOT_PATH:-/broker}
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: ${BROKER_UI_PASSWORD:-admin}
    healthcheck:
      test: wget --spider -q http://localhost:8080${BROKER_UI_ROOT_PATH:-/broker}/actuator/health
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.broker-ui.rule=PathPrefix(`${BROKER_UI_ROOT_PATH:-/broker}`)"
        - "traefik.http.routers.broker-ui.entrypoints=web"
        - "traefik.http.routers.broker-ui.service=broker-ui"
        - "traefik.http.services.broker-ui.loadbalancer.server.port=8080"
      replicas: 1
  
  app-database:
    image: postgres:16.0-bookworm
    user: 0:0
    environment:
      POSTGRES_USER: app
      POSTGRES_DB: app
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-P@ssw0rd}
    volumes:
      - app-database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
    deploy:
      replicas: 1

  app:
    image: ${APP_IMAGE:-collabry}
    environment:
      DATABASE__DSN: ${DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
      EMAIL__BROKER__SERVERS: '["broker:9091"]'
      EMAIL__SENDER__USERNAME: ${EMAIL__SENDER__USERNAME:-test@example.com}
      EMAIL__SENDER__PASSWORD: ${EMAIL__SENDER__PASSWORD:-P@ssw0rd}
      EMAIL__SENDER__HOST: ${EMAIL__SENDER__HOST:-smtp.example.com}
      EMAIL__SENDER__PORT: ${EMAIL__SENDER__PORT:-587}
      EMAIL__SENDER__START_TLS: ${EMAIL__SENDER__START_TLS:-true}
      EMAIL__SENDER__TLS: ${EMAIL__SENDER__TLS:-false}
      MESSENGER__API__PORT: "8000"
      MESSENGER__API__ROOT_URL: ${MESSENGER__API__ROOT_URL:-http://localhost:3000}
      MESSENGER__API__ROOT_PATH: ${MESSENGER__API__ROOT_PATH:-/messenger}
      MESSENGER__API__ALLOWED_ORIGINS: ${MESSENGER__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      MESSENGER__BROKER__SERVERS: '["broker:9091"]'
      MESSENGER__BROKER__TOPICS: '["chats"]'
      MESSENGER__DATABASE__DSN: ${MESSENGER__DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
      NOTIFICATIONS__API__PORT: "8010"
      NOTIFICATIONS__API__ROOT_URL: ${NOTIFICATIONS__API__ROOT_URL:-http://localhost:3000}
      NOTIFICATIONS__API__ROOT_PATH: ${NOTIFICATIONS__API__ROOT_PATH:-/notifications}
      NOTIFICATIONS__API__ALLOWED_ORIGINS: ${NOTIFICATIONS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      NOTIFICATIONS__BROKER__SERVERS: '["broker:9091"]'
      NOTIFICATIONS__BROKER__TOPICS: '["notifications"]'
      NOTIFICATIONS__DATABASE__DSN: ${NOTIFICATIONS__DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
      PROJECTS__API__PORT: "8020"
      PROJECTS__API__ROOT_URL: ${PROJECTS__API__ROOT_URL:-http://localhost:3000}
      PROJECTS__API__ROOT_PATH: ${PROJECTS__API__ROOT_PATH:-/projects}
      PROJECTS__API__ALLOWED_ORIGINS: ${PROJECTS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      PROJECTS__API__MEDIA_DIR_PATH: "/projects/media"
      PROJECTS__BROKER__SERVERS: '["broker:9091"]'
      PROJECTS__DATABASE__DSN: ${PROJECTS__DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
      STORAGE__API__PORT: "8030"
      STORAGE__API__ROOT_URL: ${STORAGE__API__ROOT_URL:-http://localhost:3000}
      STORAGE__API__ROOT_PATH: ${STORAGE__API__ROOT_PATH:-/storage}
      STORAGE__API__ALLOWED_ORIGINS: ${STORAGE__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      STORAGE__DATABASE__DSN: ${STORAGE__DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
      USERS__API__PORT: "8040"
      USERS__API__ROOT_URL: ${USERS__API__ROOT_URL:-http://localhost:3000}
      USERS__API__ROOT_PATH: ${USERS__API__ROOT_PATH:-/users}
      USERS__API__ALLOWED_ORIGINS: ${USERS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      USERS__API__OAUTH2_HABR_CALLBACK_URL: ${USERS__API__OAUTH2_HABR_CALLBACK_URL:-http://localhost:3000/users/api/rest/auth/oauth2/habr/callback}
      USERS__API__MEDIA_DIR_PATH: "/users/media"
      USERS__BROKER__SERVERS: '["broker:9091"]'
      USERS__CACHE__URL: "redis://cache:6379/0"
      USERS__DATABASE__DSN: ${USERS__DATABASE__DSN:-postgresql+asyncpg://app:P%40ssw0rd@app-database:5432/app}
    secrets:
      - target: users__habr__api_key
        source: habr_api_key
      - target: users__habr_career__api_key
        source: habr_career_api_key
      - target: users__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: users__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: users__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: users__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: users__oauth2_habr__client_id
        source: oauth2_habr_client_id
      - target: users__oauth2_habr__client_secret
        source: oauth2_habr_client_secret
      - target: storage__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: storage__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: storage__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: storage__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: projects__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: projects__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: projects__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: projects__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: notifications__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: notifications__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: notifications__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: notifications__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: messenger__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: messenger__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: messenger__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: messenger__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
    volumes:
      - app-projects-media-data:/projects/media
      - app-users-media-data:/users/media
    command: ["run"]
    healthcheck:
      test: >
        curl --fail http://localhost:8000/health &&
        curl --fail http://localhost:8010/health &&
        curl --fail http://localhost:8020/health &&
        curl --fail http://localhost:8030/health &&
        curl --fail http://localhost:8040/health
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.messenger-stripprefix.stripprefix.prefixes=${MESSENGER__API__ROOT_PATH:-/messenger}"
        - "traefik.http.routers.messenger.middlewares=messenger-stripprefix"
        - "traefik.http.routers.messenger.rule=PathPrefix(`${MESSENGER__API__ROOT_PATH:-/messenger}`)"
        - "traefik.http.routers.messenger.service=messenger"
        - "traefik.http.routers.messenger.entrypoints=web" 
        - "traefik.http.services.messenger.loadbalancer.server.port=8000"
        - "traefik.http.middlewares.notifications-stripprefix.stripprefix.prefixes=${NOTIFICATIONS__API__ROOT_PATH:-/notifications}"
        - "traefik.http.routers.notifications.middlewares=notifications-stripprefix"
        - "traefik.http.routers.notifications.rule=PathPrefix(`${NOTIFICATIONS__API__ROOT_PATH:-/notifications}`)"
        - "traefik.http.routers.notifications.service=notifications"
        - "traefik.http.routers.notifications.entrypoints=web" 
        - "traefik.http.services.notifications.loadbalancer.server.port=8010"
        - "traefik.http.middlewares.projects-stripprefix.stripprefix.prefixes=${PROJECTS__API__ROOT_PATH:-/projects}"
        - "traefik.http.routers.projects.middlewares=projects-stripprefix"
        - "traefik.http.routers.projects.rule=PathPrefix(`${PROJECTS__API__ROOT_PATH:-/projects}`)"
        - "traefik.http.routers.projects.service=projects"
        - "traefik.http.routers.projects.entrypoints=web" 
        - "traefik.http.services.projects.loadbalancer.server.port=8020"
        - "traefik.http.middlewares.storage-stripprefix.stripprefix.prefixes=${STORAGE__API__ROOT_PATH:-/storage}"
        - "traefik.http.routers.storage.middlewares=storage-stripprefix"
        - "traefik.http.routers.storage.rule=PathPrefix(`${STORAGE__API__ROOT_PATH:-/storage}`)"
        - "traefik.http.routers.storage.service=storage"
        - "traefik.http.routers.storage.entrypoints=web"
        - "traefik.http.services.storage.loadbalancer.server.port=8030"
        - "traefik.http.middlewares.users-stripprefix.stripprefix.prefixes=${USERS__API__ROOT_PATH:-/users}"
        - "traefik.http.routers.users.middlewares=users-stripprefix"
        - "traefik.http.routers.users.rule=PathPrefix(`${USERS__API__ROOT_PATH:-/users}`)"
        - "traefik.http.routers.users.service=users"
        - "traefik.http.routers.users.entrypoints=web"
        - "traefik.http.services.users.loadbalancer.server.port=8040"
      update_config:
        order: start-first
      replicas: 1

  swagger:
    image: swaggerapi/swagger-ui
    environment:
      URLS: >
        [
          {
            "url": "${USERS__API__ROOT_URL:-http://localhost:3000}${USERS__API__ROOT_PATH:-/users}/openapi.json",
            "name": "Users",
          },
          {
            "url": "${STORAGE__API__ROOT_URL:-http://localhost:3000}${STORAGE__API__ROOT_PATH:-/storage}/openapi.json",
            "name": "Storage",
          },
          {
            "url": "${PROJECTS__API__ROOT_URL:-http://localhost:3000}${PROJECTS__API__ROOT_PATH:-/projects}/openapi.json",
            "name": "Projects",
          },
          {
            "url": "${NOTIFICATIONS__API__ROOT_URL:-http://localhost:3000}${NOTIFICATIONS__API__ROOT_PATH:-/notifications}/openapi.json",
            "name": "Notifications",
          },
          {
            "url": "${MESSENGER__API__ROOT_URL:-http://localhost:3000}${MESSENGER__API__ROOT_PATH:-/messenger}/openapi.json",
            "name": "Messenger",
          },
        ]
      BASE_URL: ${SWAGGER_ROOT_PATH:-/swagger}
    healthcheck:
      test: curl --fail http://localhost:8080${SWAGGER_ROOT_PATH:-/swagger}
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.swagger.rule=PathPrefix(`${SWAGGER_ROOT_PATH:-/swagger}`)"
        - "traefik.http.routers.swagger.entrypoints=web" 
        - "traefik.http.services.swagger.loadbalancer.server.port=8080"
      update_config:
        order: start-first
      replicas: 1

  proxy:
    image: traefik:v2.10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - target: 80
        published: ${PORT:-3000}
        mode: host
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    deploy:
      update_config:
        order: start-first
      replicas: 1

# configs:
#   prometheus:
#     file: "prometheus.yaml"
volumes:
  broker-manager-data:
  broker-manager-log:
  broker-data:
  cache-data:
  # metrics-data:
  # metrics-ui-data:
  app-database-data:
  app-projects-media-data:
  app-users-media-data:
secrets:
  oauth2_habr_client_id:
    external: true
    name: ${OAUTH2_HABR_CLIENT_ID_NAME:-oauth2_habr_client_id}
  oauth2_habr_client_secret:
    external: true
    name: ${OAUTH2_HABR_CLIENT_SECRET_NAME:-oauth2_habr_client_secret}
  habr_api_key:
    external: true
    name: ${HABR_API_KEY_NAME:-habr_api_key}
  habr_career_api_key:
    external: true
    name: ${HABR_CAREER_API_KEY_NAME:-habr_career_api_key}
  jwt_access_token_private_key:
    external: true
    name: ${JWT_ACCESS_TOKEN_PRIVATE_KEY_NAME:-jwt_access_token_private_key}
  jwt_access_token_public_key:
    external: true
    name: ${JWT_ACCESS_TOKEN_PUBLIC_KEY_NAME:-jwt_access_token_public_key}
  jwt_refresh_token_private_key:
    external: true
    name: ${JWT_REFRESH_TOKEN_PRIVATE_KEY_NAME:-jwt_refresh_token_private_key}
  jwt_refresh_token_public_key:
    external: true
    name: ${JWT_REFRESH_TOKEN_PUBLIC_KEY_NAME:-jwt_refresh_token_public_key}
