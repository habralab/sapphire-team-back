version: "3.8"
services:
  # prometheus-node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.rootfs=/rootfs"
  #     - "--path.sysfs=/host/sys"
  #     - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  #   deploy:
  #     mode: global

  # prometheus:
  #   image: prom/prometheus
  #   user: "0:0"
  #   volumes:
  #     - prometheus-data:/prometheus
  #   configs:
  #     - source: prometheus
  #       target: /etc/prometheus/prometheus.yaml
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yaml"
  #     - "--storage.tsdb.path=/prometheus"
  #   deploy:
  #     replicas: 1

  # grafana:
  #   image: grafana/grafana
  #   user: "0:0"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   environment:
  #     GF_SERVER_ROOT_URL: ${GRAFANA__ROOT_URL:-http://localhost:3000}${GRAFANA__ROOT_PATH:-/grafana}
  #   deploy:
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=${GRAFANA__ROOT_PATH:-/grafana}"
  #       - "traefik.http.routers.grafana.middlewares=-stripprefix"
  #       - "traefik.http.routers.grafana.rule=PathPrefix(`${GRAFANA__ROOT_PATH:-/prometheus}`)"
  #       - "traefik.http.routers.grafana.service=grafana"
  #       - "traefik.http.routers.grafana.entrypoints=web"
  #       - "traefik.http.services.grafana.loadbalancer.server.port=3000"
  #     replicas: 1

  redis:
    image: redis:7.2.1-bookworm
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      replicas: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    user: 0:0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    healthcheck:
      test: nc -z localhost 2181 || exit -1
    deploy:
      replicas: 1

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    user: 0:0
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_kafka_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9091 || exit -1
    deploy:
      replicas: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9091
      SERVER_SERVLET_CONTEXT_PATH: ${KAFKA_UI__ROOT_PATH:-/kafka}
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI__PASSWORD:-admin}
    healthcheck:
      test: wget --spider -q http://localhost:8080${KAFKA_UI__ROOT_PATH:-/kafka}/actuator/health
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kafka-ui.rule=PathPrefix(`${KAFKA_UI__ROOT_PATH:-/kafka}`)"
        - "traefik.http.routers.kafka-ui.entrypoints=web"
        - "traefik.http.routers.kafka-ui.service=kafka-ui"
        - "traefik.http.services.kafka-ui.loadbalancer.server.port=8080"
      replicas: 1
  
  postgres:
    image: postgres:16.0-bookworm
    user: 0:0
    environment:
      POSTGRES_USER: collabry
      POSTGRES_DB: collabry
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD:-P@ssw0rd}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
    deploy:
      replicas: 1

  collabry:
    image: ${COLLABRY__IMAGE:-collabry}
    environment:
      COLLABRY__DATABASE__DSN: ${COLLABRY__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
      COLLABRY__EMAIL__BROKER__SERVERS: '["kafka:9091"]'
      COLLABRY__EMAIL__SENDER__USERNAME: ${COLLABRY__EMAIL__SENDER__USERNAME:-test@example.com}
      COLLABRY__EMAIL__SENDER__PASSWORD: ${COLLABRY__EMAIL__SENDER__PASSWORD:-P@ssw0rd}
      COLLABRY__EMAIL__SENDER__HOST: ${COLLABRY__EMAIL__SENDER__HOST:-smtp.example.com}
      COLLABRY__EMAIL__SENDER__PORT: ${COLLABRY__EMAIL__SENDER__PORT:-587}
      COLLABRY__EMAIL__SENDER__START_TLS: ${COLLABRY__EMAIL__SENDER__START_TLS:-true}
      COLLABRY__EMAIL__SENDER__TLS: ${COLLABRY__EMAIL__SENDER__TLS:-false}
      COLLABRY__MESSENGER__API__PORT: "8000"
      COLLABRY__MESSENGER__API__ROOT_URL: ${COLLABRY__MESSENGER__API__ROOT_URL:-http://localhost:3000}
      COLLABRY__MESSENGER__API__ROOT_PATH: ${COLLABRY__MESSENGER__API__ROOT_PATH:-/messenger}
      COLLABRY__MESSENGER__API__ALLOWED_ORIGINS: ${COLLABRY__MESSENGER__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      COLLABRY__MESSENGER__BROKER__SERVERS: '["kafka:9091"]'
      COLLABRY__MESSENGER__BROKER__TOPICS: '["chats"]'
      COLLABRY__MESSENGER__DATABASE__DSN: ${COLLABRY__MESSENGER__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
      COLLABRY__NOTIFICATIONS__API__PORT: "8010"
      COLLABRY__NOTIFICATIONS__API__ROOT_URL: ${COLLABRY__NOTIFICATIONS__API__ROOT_URL:-http://localhost:3000}
      COLLABRY__NOTIFICATIONS__API__ROOT_PATH: ${COLLABRY__NOTIFICATIONS__API__ROOT_PATH:-/notifications}
      COLLABRY__NOTIFICATIONS__API__ALLOWED_ORIGINS: ${COLLABRY__NOTIFICATIONS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      COLLABRY__NOTIFICATIONS__kafka__SERVERS: '["kafka:9091"]'
      COLLABRY__NOTIFICATIONS__kafka__TOPICS: '["notifications"]'
      COLLABRY__NOTIFICATIONS__DATABASE__DSN: ${COLLABRY__NOTIFICATIONS__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
      COLLABRY__PROJECTS__API__PORT: "8020"
      COLLABRY__PROJECTS__API__ROOT_URL: ${COLLABRY__PROJECTS__API__ROOT_URL:-http://localhost:3000}
      COLLABRY__PROJECTS__API__ROOT_PATH: ${COLLABRY__PROJECTS__API__ROOT_PATH:-/projects}
      COLLABRY__PROJECTS__API__ALLOWED_ORIGINS: ${COLLABRY__PROJECTS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      COLLABRY__PROJECTS__API__MEDIA_DIR_PATH: "/projects/media"
      COLLABRY__PROJECTS__BROKER__SERVERS: '["kafka:9091"]'
      COLLABRY__PROJECTS__DATABASE__DSN: ${COLLABRY__PROJECTS__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
      COLLABRY__STORAGE__API__PORT: "8030"
      COLLABRY__STORAGE__API__ROOT_URL: ${COLLABRY__STORAGE__API__ROOT_URL:-http://localhost:3000}
      COLLABRY__STORAGE__API__ROOT_PATH: ${COLLABRY__STORAGE__API__ROOT_PATH:-/storage}
      COLLABRY__STORAGE__API__ALLOWED_ORIGINS: ${COLLABRY__STORAGE__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      COLLABRY__STORAGE__DATABASE__DSN: ${COLLABRY__STORAGE__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
      COLLABRY__USERS__API__PORT: "8040"
      COLLABRY__USERS__API__ROOT_URL: ${COLLABRY__USERS__API__ROOT_URL:-http://localhost:3000}
      COLLABRY__USERS__API__ROOT_PATH: ${COLLABRY__USERS__API__ROOT_PATH:-/users}
      COLLABRY__USERS__API__ALLOWED_ORIGINS: ${COLLABRY__USERS__API__ALLOWED_ORIGINS:-["http://localhost:3000"]}
      COLLABRY__USERS__API__OAUTH2_HABR_CALLBACK_URL: ${COLLABRY__USERS__API__OAUTH2_HABR_CALLBACK_URL:-http://localhost:3000/users/api/rest/auth/oauth2/habr/callback}
      COLLABRY__USERS__API__MEDIA_DIR_PATH: "/users/media"
      COLLABRY__USERS__BROKER__SERVERS: '["kafka:9091"]'
      COLLABRY__USERS__CACHE__URL: "redis://redis:6379/0"
      COLLABRY__USERS__DATABASE__DSN: ${COLLABRY__USERS__DATABASE__DSN:-postgresql+asyncpg://collabry:P%40ssw0rd@postgres:5432/collabry}
    secrets:
      - target: collabry__users__habr__api_key
        source: habr_api_key
      - target: collabry__users__habr_career__api_key
        source: habr_career_api_key
      - target: collabry__users__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: collabry__users__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: collabry__users__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: collabry__users__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: collabry__users__oauth2_habr__client_id
        source: oauth2_habr_client_id
      - target: collabry__users__oauth2_habr__client_secret
        source: oauth2_habr_client_secret
      - target: collabry__storage__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: collabry__storage__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: collabry__storage__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: collabry__storage__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: collabry__projects__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: collabry__projects__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: collabry__projects__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: collabry__projects__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: collabry__notifications__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: collabry__notifications__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: collabry__notifications__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: collabry__notifications__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
      - target: collabry__messenger__jwt__access_token_public_key
        source: jwt_access_token_public_key
      - target: collabry__messenger__jwt__access_token_private_key
        source: jwt_access_token_private_key
      - target: collabry__messenger__jwt__refresh_token_public_key
        source: jwt_refresh_token_public_key
      - target: collabry__messenger__jwt__refresh_token_private_key
        source: jwt_refresh_token_private_key
    volumes:
      - collabry-projects-media-data:/projects/media
      - collabry-users-media-data:/users/media
    command: ["run"]
    healthcheck:
      test: >
        curl --fail http://localhost:8000/health &&
        curl --fail http://localhost:8010/health &&
        curl --fail http://localhost:8020/health &&
        curl --fail http://localhost:8030/health &&
        curl --fail http://localhost:8040/health
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.messenger-stripprefix.stripprefix.prefixes=${COLLABRY__MESSENGER__API__ROOT_PATH:-/messenger}"
        - "traefik.http.routers.messenger.middlewares=messenger-stripprefix"
        - "traefik.http.routers.messenger.rule=PathPrefix(`${COLLABRY__MESSENGER__API__ROOT_PATH:-/messenger}`)"
        - "traefik.http.routers.messenger.service=messenger"
        - "traefik.http.routers.messenger.entrypoints=web" 
        - "traefik.http.services.messenger.loadbalancer.server.port=8000"
        - "traefik.http.middlewares.notifications-stripprefix.stripprefix.prefixes=${COLLABRY__NOTIFICATIONS__API__ROOT_PATH:-/notifications}"
        - "traefik.http.routers.notifications.middlewares=notifications-stripprefix"
        - "traefik.http.routers.notifications.rule=PathPrefix(`${COLLABRY__NOTIFICATIONS__API__ROOT_PATH:-/notifications}`)"
        - "traefik.http.routers.notifications.service=notifications"
        - "traefik.http.routers.notifications.entrypoints=web" 
        - "traefik.http.services.notifications.loadbalancer.server.port=8010"
        - "traefik.http.middlewares.projects-stripprefix.stripprefix.prefixes=${COLLABRY__PROJECTS__API__ROOT_PATH:-/projects}"
        - "traefik.http.routers.projects.middlewares=projects-stripprefix"
        - "traefik.http.routers.projects.rule=PathPrefix(`${COLLABRY__PROJECTS__API__ROOT_PATH:-/projects}`)"
        - "traefik.http.routers.projects.service=projects"
        - "traefik.http.routers.projects.entrypoints=web" 
        - "traefik.http.services.projects.loadbalancer.server.port=8020"
        - "traefik.http.middlewares.storage-stripprefix.stripprefix.prefixes=${COLLABRY__STORAGE__API__ROOT_PATH:-/storage}"
        - "traefik.http.routers.storage.middlewares=storage-stripprefix"
        - "traefik.http.routers.storage.rule=PathPrefix(`${COLALBRY__STORAGE__API__ROOT_PATH:-/storage}`)"
        - "traefik.http.routers.storage.service=storage"
        - "traefik.http.routers.storage.entrypoints=web"
        - "traefik.http.services.storage.loadbalancer.server.port=8030"
        - "traefik.http.middlewares.users-stripprefix.stripprefix.prefixes=${COLLABRY__USERS__API__ROOT_PATH:-/users}"
        - "traefik.http.routers.users.middlewares=users-stripprefix"
        - "traefik.http.routers.users.rule=PathPrefix(`${COLLABRY__USERS__API__ROOT_PATH:-/users}`)"
        - "traefik.http.routers.users.service=users"
        - "traefik.http.routers.users.entrypoints=web"
        - "traefik.http.services.users.loadbalancer.server.port=8040"
      update_config:
        order: start-first
      replicas: 1

  swagger:
    image: swaggerapi/swagger-ui
    environment:
      URLS: >
        [
          {
            "url": "${COLLABRY__USERS__API__ROOT_URL:-http://localhost:3000}${COLLABRY__USERS__API__ROOT_PATH:-/users}/openapi.json",
            "name": "Users",
          },
          {
            "url": "${COLLABRY__STORAGE__API__ROOT_URL:-http://localhost:3000}${COLLABRY__STORAGE__API__ROOT_PATH:-/storage}/openapi.json",
            "name": "Storage",
          },
          {
            "url": "${COLLABRY__PROJECTS__API__ROOT_URL:-http://localhost:3000}${COLLABRY__PROJECTS__API__ROOT_PATH:-/projects}/openapi.json",
            "name": "Projects",
          },
          {
            "url": "${COLLABRY__NOTIFICATIONS__API__ROOT_URL:-http://localhost:3000}${COLLABRY__NOTIFICATIONS__API__ROOT_PATH:-/notifications}/openapi.json",
            "name": "Notifications",
          },
          {
            "url": "${COLLABRY__MESSENGER__API__ROOT_URL:-http://localhost:3000}${COLLABRY__MESSENGER__API__ROOT_PATH:-/messenger}/openapi.json",
            "name": "Messenger",
          },
        ]
      BASE_URL: ${SWAGGER__ROOT_PATH:-/swagger}
    healthcheck:
      test: curl --fail http://localhost:8080${SWAGGER__ROOT_PATH:-/swagger}
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.swagger.rule=PathPrefix(`${SWAGGER__ROOT_PATH:-/swagger}`)"
        - "traefik.http.routers.swagger.entrypoints=web" 
        - "traefik.http.services.swagger.loadbalancer.server.port=8080"
      update_config:
        order: start-first
      replicas: 1

  traefik:
    image: traefik:v2.10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - target: 80
        published: ${TRAEFIK__PORT:-3000}
        mode: host
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    deploy:
      update_config:
        order: start-first
      replicas: 1

# configs:
#   prometheus:
#     file: "prometheus.yaml"
volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  redis-data:
  # prometheus-data:
  # grafana-data:
  postgres-data:
  collabry-projects-media-data:
  collabry-users-media-data:
secrets:
  oauth2_habr_client_id:
    external: true
    name: ${SECRETS__OAUTH2_HABR_CLIENT_ID_NAME:-oauth2_habr_client_id}
  oauth2_habr_client_secret:
    external: true
    name: ${SECRETS__OAUTH2_HABR_CLIENT_SECRET_NAME:-oauth2_habr_client_secret}
  habr_api_key:
    external: true
    name: ${SECRETS__HABR_API_KEY_NAME:-habr_api_key}
  habr_career_api_key:
    external: true
    name: ${SECRETS__HABR_CAREER_API_KEY_NAME:-habr_career_api_key}
  jwt_access_token_private_key:
    external: true
    name: ${SECRETS__JWT_ACCESS_TOKEN_PRIVATE_KEY_NAME:-jwt_access_token_private_key}
  jwt_access_token_public_key:
    external: true
    name: ${SECRETS__JWT_ACCESS_TOKEN_PUBLIC_KEY_NAME:-jwt_access_token_public_key}
  jwt_refresh_token_private_key:
    external: true
    name: ${SECRETS__JWT_REFRESH_TOKEN_PRIVATE_KEY_NAME:-jwt_refresh_token_private_key}
  jwt_refresh_token_public_key:
    external: true
    name: ${SECRETS__JWT_REFRESH_TOKEN_PUBLIC_KEY_NAME:-jwt_refresh_token_public_key}
